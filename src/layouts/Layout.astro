---
import "@/styles/global.css";
import Footer from "@/components/footer/Footer.vue";
import fetchApi from "../utils/strapi";
import Header from "@/components/header/Header.vue";
import SEO from "@/components/SEO.astro";
import cachedFetchApi from "@/utils/cacheFetchapi";

// Accept SEO metadata as props
const { metaObj } = Astro.props;
const url = Astro.url.href;
const navData = await cachedFetchApi({
  endpoint: "api/navbar",
  query: { pLevel: "4" },
});

const FooterData = await cachedFetchApi({
  endpoint: "api/footer",
  query: { pLevel: "4" },
});
// Accept class as props
const { class: sectionClass } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <script type="text/javascript">
      // Define dataLayer and the gtag function.
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }

      // Set default consent to 'denied' as a placeholder
      // Determine actual values based on your own requirements
      gtag("consent", "default", {
        ad_storage: "granted",
        ad_user_data: "granted",
        ad_personalization: "granted",
        analytics_storage: "granted",
      });
    </script>
    <script type="text/javascript">
      (function (w, d, s, l, i) {
        w[l] = w[l] || [];
        w[l].push({ "gtm.start": new Date().getTime(), event: "gtm.js" });
        var f = d.getElementsByTagName(s)[0],
          j = d.createElement(s),
          dl = l != "dataLayer" ? "&l=" + l : "";
        j.async = true;
        j.src = "https://www.googletagmanager.com/gtm.js?id=" + i + dl;
        f.parentNode.insertBefore(j, f);
      })(window, document, "script", "dataLayer", process.env.GTM_ID);
    </script>
    <SEO
      title={metaObj?.title}
      description={metaObj?.description}
      image={metaObj?.image}
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap&subset=latin"
      rel="stylesheet"
      media="all"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.css"
    />
  </head>
  <body class="">
    <Header navData={navData?.data} path={url} client:load />
    <main
      class={`pt-[66px] md:pt-[78px] min-h-[calc(100vh-10rem)] ${sectionClass ?? ""}`}
    >
      <slot />
    </main>
    <Footer
      footerData={FooterData?.data?.footerData}
      copyRightText={FooterData?.data?.copyRightText}
      termsOfService={FooterData?.data?.termsOfService}
      privacyText={FooterData?.data?.privacyText}
      socialMedia={FooterData?.data?.socialMedia}
      address={FooterData?.data?.address}
      client:load
    />
    <!-- CookieConsent Script -->

    <!-- <script src="https://cdn.jsdelivr.net/npm/cookieconsent@3/build/cookieconsent.min.js" defer
    ></script> -->
    <!-- <script is:inline>
      window.addEventListener("load", function () {

        window.cookieconsent.initialise({
          palette: {
            popup: {
              background: "#ffffff",
              text: "#1f2937",
            },
            button: {
              background: "#6366f1",
              text: "#ffffff",
            },
            highlight: {
              background: "transparent",
              border: "#E5E4E2",
              text: "#000000",
            },
          },
          theme: "classic",
          position: "bottom-right",
          type: "opt-in",
          content: {
            message:
              "We use cookies to enhance your browsing experience, serve personalized ads or content, and analyze our traffic. By clicking 'Accept', you consent to our use of cookies.",
            dismiss: "Decline",
            allow: "Accept",
          },
          cookie: {
            name: "cookieconsent_status",
            expires: 365,
          },
          revokable: true,
          // revokeBtn: false,
          showLink: false,
          law: {
            regionalLaw: false, // Disable regional law
          },
          onPopupOpen: function () {
            const popup = document.querySelector(".cc-window");
            if (!popup || popup.querySelector(".custom-close-btn")) return;
            const closeBtn = document.createElement("button");
            closeBtn.classList.add("custom-close-btn");
            closeBtn.innerHTML = "&times;";
            Object.assign(closeBtn.style, {
              position: "absolute",
              top: "10px",
              right: "10px",
              background: "transparent", // Tailwind gray-100
              border: "none",
              borderRadius: "9999px", // rounded-full
              width: "32px",
              height: "32px",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "1.5rem",
              fontWeight: "bold",
              color: "#6b7280", // Tailwind gray-500
              cursor: "pointer",
              zIndex: "1000",
            });
            closeBtn.addEventListener("mouseover", () => {
              closeBtn.style.background = "#e5e7eb"; // Tailwind gray-200
              closeBtn.style.color = "#111827"; // Tailwind gray-900
            });
            closeBtn.addEventListener("mouseout", () => {
              closeBtn.style.color = "#6b7280"; // gray-500
            });
            closeBtn.addEventListener("click", function () {
              popup.style.display = "none";
            });
            popup.querySelector(".cc-compliance").appendChild(closeBtn);
          },

          onInitialise: function (status) {
            const type = this.options.type;
            const didConsent = this.hasConsented();
            updateConsent(didConsent);
          },

          onStatusChange: function (status, chosenBefore) {
            const didConsent = this.hasConsented();
            updateConsent(didConsent);
          },
        });

        function updateConsent(consent) {
          gtag("consent", "update", {
            analytics_storage: consent ? "granted" : "denied",
            ad_storage: consent ? "granted" : "denied",
            functionality_storage: consent ? "granted" : "denied",
            personalization_storage: consent ? "granted" : "denied",
            security_storage: "granted", // Usually always granted
          });

          // Manually push the GTM consent update event
          window.dataLayer.push({
            event: "gtm.consent_update",
          });
        }

      });
    </script> -->
  </body>
</html>

<style>
  html,
  body {
    margin: 0;
    width: 100%;
    height: 100%;
    font-family: "Inter", sans-serif;
    scroll-behavior: smooth;
    scroll-padding-top: 8rem;
  }
</style>
