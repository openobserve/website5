---
import Layout from "@/layouts/Layout.astro";
import ComponentCollectionMapper from "@/components/ComponentCollectionMapper.vue";
import { getAllBlogs } from "@/utils/api/blog";
import fetchApi from "@/utils/strapi";

export async function getStaticPaths() {
  const PageData: string[] = await fetchApi({
    endpoint: "api/solution-pages",
    query: { pLevel: "4"},
  });
  const slugs = PageData?.data;
  return slugs.map((it: any) => ({
    params: { solution: it.slug },
  }));
}

const { solution: id } = Astro.params;
const PageData = await fetchApi({
  endpoint: "api/solution-pages",
  query: {
    pLevel: "4",
    status: "draft",
    "filters[slug][$eq]": id,
  },
});

const data = PageData?.data[0]?.body || {};
const seoData = PageData?.data[0]?.seo || {};

const filterblogsMapper: Record<string, string> = {
  "aws-monitoring": "aws",
  "azure-monitoring": "microsoft",
  "gcp-monitoring": "gcp",
  "kubernetes-monitoring": "kubernetes",
  "database-monitoring": "database",
  opentelemetry: "opentelemetry",
};

const matchedCategory = id ? filterblogsMapper[id] : null;
const allBlogs = await getAllBlogs();

// Filter blogs where at least one tag matches the category
const filteredBlogs = matchedCategory
  ? allBlogs.filter((blog) =>
      blog.tags?.some(
        (tag: any) => tag.slug?.toLowerCase() === matchedCategory.toLowerCase()
      )
    )
  : allBlogs;

// Prepare blog data by removing content and limiting to 10
const finalBlogs = (filteredBlogs.length > 0 ? filteredBlogs : allBlogs).slice(
  0,
  10
);
const blogData = finalBlogs.map(({ content, ...rest }) => rest);
---

<Layout metaObj={seoData}>
  <ComponentCollectionMapper data={data} blogsData={blogData} client:load />
</Layout>
