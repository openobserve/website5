---
import Layout from "@/layouts/Layout.astro";
import { getTotalCounts } from "@/utils/cache";
import {
  getAllResourceBlogs,
  getResourceBlogsByPagination,
  getAllResourceCategories,
  getAllResourcesLists,
} from "@/utils/api/resources";
import { ITEMS_PER_PAGE } from "@/utils/api/constant";
import BlogCategoryListing from "@/components/blog/BlogCategoryListing.vue";
import BlogsListingWrapper from "@/components/blog/BlogListingWrapper.vue";
import CustomSection from "@/components/core/CustomSection.vue";
import CommonHerosection from "@/components/herosection/CommonHeroSection.vue";
import BlogPageWrapper from "@/components/blog/BlogPageWrapper.vue";
import { getPaginatedTags } from "@/utils/paginateTags";

// Generate static paths for pagination
export async function getStaticPaths() {
  const totalBlogs = (await getTotalCounts()).resourceBlogsCount;

  const totalPages = Math.ceil(totalBlogs / ITEMS_PER_PAGE);
  return Array.from({ length: totalPages }, (_, index) => ({
    params: { page: (index + 1).toString() },
  }));
}

// Get the current page from Astro props
const { page } = Astro.params;
const currentPage = parseInt(page);

// Handle invalid page numbers
if (isNaN(currentPage) || currentPage < 1) {
  throw Astro.redirect("/404");
}

// Fetch paginated blogs for the current page
const blogsData = await getResourceBlogsByPagination(
  currentPage,
  ITEMS_PER_PAGE
);
const allArticles = await getAllResourcesLists();
// Fetch categories for suggestions
const suggestionData = await getAllResourceCategories();
const count = await getTotalCounts();
const paginatedTags = getPaginatedTags(suggestionData, currentPage, 15);

const metaObj = {
  title: "Articles | OpenObserve Open Source Observability Platform",
  description:
    "Stay updated with the latest in observability, monitoring best practices, and platform updates. Read technical guides and success stories from the OpenObserve team.",
};
---

<Layout metaObj={metaObj}>
  <CommonHerosection title="Articles" description="" align="CENTER" />
  <CustomSection sectionClass="">
    <!-- <BlogCategoryListing
      categories={suggestionData.slice(0, Math.min(5, suggestionData.length))}
      allTags={suggestionData.slice(0, Math.min(12, suggestionData.length))}
      type="articles"
      client:load
    />
    <BlogsListingWrapper
      searchBar
      allBlogs={allArticles}
      type="articles"
      totalItems={count.resourceBlogsCount}
      currentPage={currentPage}
      blogsData={blogsData}
      client:load
    /> -->
    <BlogPageWrapper
      categories={suggestionData.slice(0, Math.min(5, suggestionData.length))}
      allTags={paginatedTags}      type="articles"
      allBlogs={allArticles}
      blogsData={blogsData}
      currentPage={currentPage}
      totalItems={count.resourceBlogsCount}
      client:load="vue"
    />
  </CustomSection>
</Layout>
