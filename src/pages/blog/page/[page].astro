---
import Layout from "../../../layouts/Layout.astro";
import ResourceHeroSection from "../../../components/heroSections/ResourceHeroSection.vue";
import BlogsListingWrapper from "../../../components/wrapper/BlogsListingWrapper.vue";
import TilesWithTitleWrapper from "../../../components/wrapper/TilesWithTitleWrapper.vue";
import CaseStudyWrapper from "../../../components/wrapper/CaseStudyWrapper.vue";
import BlogPagination from "../../../components/blogs/BlogPagination.vue";
import fetchApi from "../../../utils/strapi";

const itemsPerPage = 50;

// Generate static paths for pagination
export async function getStaticPaths() {
  const totalBlogsResponse = await fetchApi({
    endpoint: "api/blog-pages",
    query: {
      status: "draft",
      pLevel: "10",
    },
  });
  const totalBlogs = totalBlogsResponse?.meta?.pagination?.total;

  const totalPages = Math.ceil(totalBlogs / 50);

  return Array.from({ length: totalPages }, (_, index) => ({
    params: { page: (index + 1).toString() },
  }));
}

// Get the current page from Astro props
const { page } = Astro.params;
const currentPage = parseInt(page);

// Handle invalid page numbers
if (isNaN(currentPage) || currentPage < 1) {
  throw Astro.redirect("/404");
}

// Fetch paginated blogs for the current page
const blogsData = await fetchApi({
  endpoint: "api/blog-pages",
  query: {
    status: "draft",
    "pagination[page]": currentPage,
    "pagination[pageSize]": itemsPerPage,
    pLevel: "10",
  },
});
// Fetch categories for suggestions
const suggestionData = await fetchApi({
  endpoint: "api/categories",
  query: { 
    path: "", 
    status: "draft", 
    pLevel: "10" 
  },
});

// Fetch case studies
const caseStudyData = await fetchApi({
  endpoint: "api/blog-pages",
  query: {
    "filters[caseStudies][$eq]": true,
    status: "draft",
    pLevel: "10",
  },
});

const cardHeader = {
  title: "Additional Learning Resources",
  description:
    "Stay ahead of the curve and optimize your observability strategy with our learning resources.",
};

const cardData = [
  {
    icon: "/resources/64pxComponent.svg",
    title: "Case Studies",
  },
];
---

<Layout title={`Blog Posts | Page ${currentPage} | Resources`}>
  <ResourceHeroSection
    title="Blogs"
    subtitle="Explore latest insights and updates"
  />
  
  {caseStudyData.data?.length > 0 && (
    <CaseStudyWrapper
      data={caseStudyData.data}
      title="Case Studies"
      subtitle="Learn from real-world implementations"
      client:load
    />
  )}
  
  <BlogsListingWrapper
    blogsData={blogsData}
    currentPage={currentPage} 
    suggestionData={suggestionData.data}
    client:load
  />
  
  <TilesWithTitleWrapper
    title={cardHeader.title}
    subtitle={cardHeader.description}
    items={cardData}
  />
</Layout>
