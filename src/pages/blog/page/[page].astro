---
import Layout from "../../../layouts/Layout.astro";
import ResourceHeroSection from "../../../components/heroSections/ResourceHeroSection.vue";
import BlogsListingWrapper from "../../../components/wrapper/BlogsListingWrapper.vue";
import { getTotalCounts } from "@/utils/cache";
import {
  getAllCategories,
  getBlogsByPagination,
  getCaseStudies,
  getAllBlogs,
  ITEMS_PER_PAGE,
} from "@/utils/api/blogs";
import CustomSuggestionsWrapper from "@/components/wrapper/CustomSuggestionsWrapper.vue";
import { enablePagination } from "@/utils/enablePagination";

// Generate static paths for pagination
export async function getStaticPaths() {
  const totalBlogs = (await getTotalCounts()).blogsCount;

  const totalPages = Math.ceil(totalBlogs / ITEMS_PER_PAGE);

  return Array.from({ length: totalPages }, (_, index) => ({
    params: { page: (index + 1).toString() },
  }));
}

// Get the current page from Astro props
const { page } = Astro.params;
const currentPage = parseInt(page);

// Handle invalid page numbers
if (isNaN(currentPage) || currentPage < 1) {
  throw Astro.redirect("/404");
}

// Fetch paginated blogs for the current page
const blogsData = await getBlogsByPagination(currentPage, ITEMS_PER_PAGE);
// Fetch categories for suggestions
const suggestionData = await getAllCategories();
const allBlogsData = (await getAllBlogs()).filter((blog) => !blog.caseStudies);
const count = await getTotalCounts();
const shouldPaginate = enablePagination(allBlogsData);

const metaObj = {
  title:
    "Blog | Open Source Observability Platform for Logs, Metrics, Traces, and More â€“ Your Ultimate Dashboard for Alerts and Insights",
  description: "Blog Posts",
};
---

<Layout metaObj={metaObj}>
  <ResourceHeroSection
    title="Blog"
    description="Explore latest insights and updates"
  />
  <!-- categories section -->
  <section class="container mx-auto px-4 md:px-6 lg:px-8 xl:px-11">
    <!-- CustomSuggestions Section -->
    <div class="py-3 md:py-6">
      <CustomSuggestionsWrapper
        suggestions={suggestionData.slice(
          0,
          Math.min(15, suggestionData.length)
        ) || []}
        type="blog"
        client:load
      />
    </div>

    <!-- SearchBar Section -->
    <!-- <div class="search-container relative w-full px-4 pb-5">
      <div
        class="flex flex-row w-full space-x-2 justify-between items-center text-white border border-gray-50/10 h-10 rounded-lg px-2 focus-within:border-sky-500 bg-gray-700"
      >
        <span class="text-white px-4">
          <img src="/search.svg" alt="" class="w-6 h-6" />
        </span>
        <input
          id="blogSearchInput"
          type="text"
          class="w-full bg-transparent focus:outline-none text-white text-sm placeholder-neutral-400"
          placeholder="Search for a blog..."
          @input="searchBlogs"
        />
      </div> -->
    <!-- <div class="mt-2 ml-3 text-white text-sm">
        <template v-if="searchItem.trim()">
          <p v-show="filteredBlogsData.length > 0">
            Search results for "<span class="font-bold">{{ searchItem }}</span>"
          </p>
          <p v-show="filteredBlogsData.length === 0">
            No results for "<span class="font-bold">{{ searchItem }}</span>"
          </p>
        </template>
      </div>
    </div> -->
  </section>
  <BlogsListingWrapper
    searchBar
    type="blog"
    blogsData={blogsData}
    allBlogData={allBlogsData}
    currentPage={currentPage}
    totalItems={count.blogsCount}
    client:load
  />

  <!-- <TilesWithTitleWrapper
    title={cardHeader.title}
    subtitle={cardHeader.description}
    items={cardData}
  /> -->
</Layout>
