---
import Layout from "../../../layouts/Layout.astro";
import ResourceHeroSection from "../../../components/heroSections/ResourceHeroSection.vue";
import BlogsListingWrapper from "../../../components/wrapper/BlogsListingWrapper.vue";
import TilesWithTitleWrapper from "../../../components/wrapper/TilesWithTitleWrapper.vue";
import CaseStudyWrapper from "../../../components/wrapper/CaseStudyWrapper.vue";
import { getTotalCounts } from "@/utils/cache";
import {
  getAllCategories,
  getBlogsByPagination,
  getCaseStudies,
} from "@/utils/api/blogs";

const itemsPerPage = 50;

// Generate static paths for pagination
export async function getStaticPaths() {
  const totalBlogs = (await getTotalCounts()).blogsCount;

  const totalPages = Math.ceil(totalBlogs / 50);

  return Array.from({ length: totalPages }, (_, index) => ({
    params: { page: (index + 1).toString() },
  }));
}

// Get the current page from Astro props
const { page } = Astro.params;
const currentPage = parseInt(page);

// Handle invalid page numbers
if (isNaN(currentPage) || currentPage < 1) {
  throw Astro.redirect("/404");
}

// Fetch paginated blogs for the current page
const blogsData = await getBlogsByPagination(currentPage, itemsPerPage);
// Fetch categories for suggestions
const suggestionData = await getAllCategories();

// Fetch case studies
const caseStudyData = await getCaseStudies();

const count = await getTotalCounts();

const cardHeader = {
  title: "Additional Learning Resources",
  description:
    "Stay ahead of the curve and optimize your observability strategy with our learning resources.",
};

const cardData = [
  {
    icon: "/resources/64pxComponent.svg",
    title: "Case Studies",
  },
];

const metaObj = {
  title:
    "Blog | Open Source Observability Platform for Logs, Metrics, Traces, and More â€“ Your Ultimate Dashboard for Alerts and Insights",
  description: "Blog Posts",
};
---

<Layout metaObj={metaObj}>
  <ResourceHeroSection
    title="Blog"
    description="Explore latest insights and updates"
  />

  <!-- {
    caseStudyData?.length > 0 && (
      <CaseStudyWrapper data={caseStudyData || []} client:load />
    )
  } -->

  <BlogsListingWrapper
    type="blog"
    blogsData={blogsData}
    currentPage={currentPage}
    suggestionData={suggestionData.slice(0, 15) || []}
    totalItems={count.blogsCount}
    client:load
  />

  <!-- <TilesWithTitleWrapper
    title={cardHeader.title}
    subtitle={cardHeader.description}
    items={cardData}
  /> -->
</Layout>
