---
import fetchApi from "../../../utils/strapi";
import Layout from "../../../layouts/Layout.astro";
import ResourceHeroSection from "../../../components/heroSections/ResourceHeroSection.vue";
import BlogsListingWrapper from "../../../components/wrapper/BlogsListingWrapper.vue";
import TilesWithTitleWrapper from "../../../components/wrapper/TilesWithTitleWrapper.vue";
import CaseStudyWrapper from "../../../components/wrapper/CaseStudyWrapper.vue";
import { getBlogsFromCache } from "../../../utils/blogCache";
import {getAllBlogsCategoriesAndAuthors, getCaseStudies} from "../../../utils/cache";

// ðŸš€ Fetch All Categories and Blogs
export async function getStaticPaths() {
  const { categories, blogs } = await getAllBlogsCategoriesAndAuthors();
  // Map each category to its related blogs
  const categoryMap = categories?.map((category) => ({
    params: { tag: category.slug }, // Correct attribute access for category
    props: {
      category,
      blogs: blogs.filter((blog) =>
        blog.categories.some(
          (cat) => cat.id === category.id // Ensure correct comparison
        )
      ),
    },
  }));

  return categoryMap;
}

// ðŸš€ Get Category Slug from URL
const { tag } = Astro.params;
const { category, blogs } = Astro.props;
let blogsData = [];
if (category) {
  blogsData = blogs.filter((blog) =>
    blog.categories.some((cat) => cat.id === category.id)
  );
} else {
  console.log(`Category for tag ${tag} not found.`);
}

// âœ… Fetch Additional Data
const suggestionData = await fetchApi({
  endpoint: "api/categories",
  query: { path: "", status: "draft", pLevel: "4" },
});

const loadcaseStudyData = await fetchApi({
  endpoint: "api/blog-pages",
  query: { "filters[caseStudies][$eq]": true, status: "draft", pLevel: "4" },
});

// ðŸ”¹ Additional Card Data
const cardHeader = {
  title: "Additional Learning Resources",
  description:
    "Stay ahead of the curve and optimize your observability strategy with our learning resources.",
};

const cardData = [
  { icon: "/resources/64pxComponent.svg", title: "Case Studies" },
];
---

<!-- âœ… Render Category-Based Blogs -->
<Layout>
  <ResourceHeroSection
    title="Blogs"
    subtitle={`Showing posts for category: ${category?.name ?? tag}`}
  />

  <CaseStudyWrapper
    data={loadcaseStudyData?.data || []}
    title="Blog Posts"
    subtitle="Latest articles and updates"
    client:load
  />

  <BlogsListingWrapper
    blogsData={blogsData}
    currentPage={1}
    suggestionData={suggestionData?.data || []}
    client:load
  />

  <TilesWithTitleWrapper
    title={cardHeader.title}
    subtitle={cardHeader.description}
    items={cardData}
  />
</Layout>
