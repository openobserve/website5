---
import {
  getAllBlogs,
  getAllCategories,
  itemsPerPage,
  getAllAuthors,
  getBlogsByPaginationAndAuthor,
} from "@/utils/api/blogs";
import CustomSuggestionsWrapper from "@/components/wrapper/CustomSuggestionsWrapper.vue";
import Layout from "@/layouts/Layout.astro";
import ResourceHeroSection from "@/components/heroSections/ResourceHeroSection.vue";
import BlogsListingWrapper from "@/components/wrapper/BlogsListingWrapper.vue";

export async function getStaticPaths() {
  const categories = await getAllCategories();
  const totalBlogs = await getAllBlogs();
  let paths = [];

  for (const category of categories) {
    const categoriesBlogs = totalBlogs.filter((blog) =>
      blog.categories.some((it) => it.id === category.id)
    );
    const totalPages = Math.ceil(categoriesBlogs.length / itemsPerPage);

    for (let page = 2; page <= totalPages; page++) {
      paths.push({
        params: { tag: category.slug, page: page.toString() },
      });
    }
  }
  
  return paths;
}

// Get the current page from Astro props
const { page, tag } = Astro.params;
const currentPage = parseInt(page);
console.log(page, tag, "page, tag ====>>");
console.log("currentPage=====", currentPage);
if (isNaN(currentPage) || currentPage < 1) {
  throw Astro.redirect("/404");
}

// Fetch paginated blogs for the current page
const blogsData = (
  await getBlogsByPaginationAndAuthor(currentPage, itemsPerPage, tag)
).filter((blog) => !blog.caseStudies);



// if (category) {
//   blogsData = blogs.filter((blog) =>
//     blog.categories.some((cat) => cat.id === category.id)
//   ).filter((blog) => !blog.caseStudies);
// } else {
// }
const suggestionData = await getAllCategories();
const metaObj = {
  title:
    "Tag | Blog | Open Source Observability Platform for Logs, Metrics, Traces, and More – Your Ultimate Dashboard for Alerts and Insights",
};
---

<!-- ✅ Render Category-Based Blogs -->
<Layout metaObj={metaObj}>
  <ResourceHeroSection
    title="Blog"
    description={`Post by the category: ${tag}`}
  />

  <!-- <BlogsDataWrapper data={loadcaseStudyData || []} client:load /> -->

  <section class="container mx-auto px-4 md:px-6 lg:px-8 xl:px-11">
    <!-- CustomSuggestions Section -->
    <div class="py-3 md:py-6">
      <CustomSuggestionsWrapper
        suggestions={suggestionData.slice(
          0,
          Math.min(15, suggestionData.length)
        ) || []}
        type="blog"
        client:load
      />
    </div>

    <BlogsListingWrapper
      type="blog"
      blogsData={blogsData}
      client:load
      subType="tag"
      identifier={tag}
      totalItems={blogsData.length}
      shouldPaginate={page.length > 1}
    />
    <!-- shouldPaginate={page?.length > 1} -->
    <!-- {...paginationProps} -->

    <!-- <div>
      <BlogPagination
        totalItems={count.blogsCount} 
        itemsPerPage={itemsPerPage}
        currentPage={1}
        client:load
        type="blog"
      />
    </div> -->

    <!-- 
  <TilesWithTitleWrapper
    title={cardHeader.title}
    subtitle={cardHeader.description}
    items={cardData}
  /> -->
  </section>
</Layout>
